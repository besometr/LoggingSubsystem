////////////////////////////////////////////////////////////////////////////////
// Подсистема "Логирование"
//
// 
// 
////////////////////////////////////////////////////////////////////////////////



#Область ПрограммныйИнтерфейс


Функция ВыполнитьЗаписьЛога(СтруктураЛога, ТекстОшибки = "", Отказ = Ложь)Экспорт 
	
	//Получение строки данных в JSON
	ДанныеЛогаВJSON 				= СериализоватьСтруктуруВВJSON(СтруктураЛога, ТекстОшибки, Отказ);
	
	//Получение параметров подключения к ELK
	//TODO получить настройки подключения
	СтруктураПараметровПодключения	= "";
	
	//Получение текста запроса на добавление лога в ELK
	АдресЗапросаДобавленияЛога		= СформироватьАдресЗапроса_ДобавлениеНовогоЛога(СтруктураПараметровПодключения);
	
	//Создание запроса на добавление лога в ELK
	HTTPЗапрос						= КонструкторHTTPЗапросаELK(АдресЗапросаДобавленияЛога, ДанныеЛогаВJSON);
	
КонецФункции


#КонецОбласти



#Область СлужебныйПрограммныйИнтерфейс


// КонструкторСтруктурыСлужебныхПолейЛога
// Формирует структуру служебных полей лога для Информационной базы.
//
// Возвращаемое значение:
//	Структура	- Служебные поля лога.
//		* host		- Строка - Сервер.
//		* _app		- Строка - Имя приложения.
//		* _node		- Строка - Экземпляр ИБ (Применительно к СПО "Пегас" - Узел обмена).
//		* _branch	- Строка - Структурная единица ИБ (Применительно к СПО "Пегас" - Филиал ИБ).
//
Функция КонструкторСтруктурыСлужебныхПолейЛога() Экспорт
	
	//Служебные полей ИБ
	СтруктураСлужебныхПолейЛога = Новый Структура();
		
	СтруктураСлужебныхПолейЛога.Вставить("host",	ОбщегоНазначения.КонструкторСтруктурыПараметровПодключения().Сервер);
	СтруктураСлужебныхПолейЛога.Вставить("_app",	Метаданные.Синоним);
	СтруктураСлужебныхПолейЛога.Вставить("_node",	"Подсистема логирования ELK: Demo"); //рсжBCP_ТекущийУзел
	СтруктураСлужебныхПолейЛога.Вставить("_branch",	"Москва Восток"); //споГородПоУмолчанию
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураСлужебныхПолейЛога);
	
КонецФункции

// КонструкторСтруктурыСеансовыхПолейЛога
// Формирует структуру сеансовых данных пользователя.
//
// Возвращаемое значение:
//	Структура	- Сеансовые данные.
//		* ИмяПользователя	- Строка - Полное имя пользователя ИБ.
//		* НомерСеанса		- Строка - Номер сеанса.
//
Функция КонструкторСтруктурыСеансовыхПолейЛога() Экспорт 

	СтруктураСеансовыхПолейЛога = Новый Структура();
	
	СтруктураСеансовыхПолейЛога.Вставить("ИмяПользователя",	ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя);
	СтруктураСеансовыхПолейЛога.Вставить("НомерСеанса",		Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0"));
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураСеансовыхПолейЛога);	

КонецФункции



Функция СериализоватьСтруктуруВВJSON(СтруктураЛога, ТекстОшибки = "", Отказ = Ложь)Экспорт 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(ЗаписьJSON, СтруктураЛога);
		СтрокаJSON = ЗаписьJSON.Закрыть();
	Исключение
		Отказ		= Истина;
		ТекстОшибки = "Не удалось сформировать сообщение JSON: " + ОписаниеОшибки();
		СтрокаJSON = "";
	КонецПопытки;

	Возврат СтрокаJSON;
	
КонецФункции

#КонецОбласти



#Область СлужебныеПроцедурыИФункции


Функция СформироватьАдресЗапроса_ДобавлениеНовогоЛога(СтруктураПараметровПодключения)
	
	//Адрес запроса
	СтрокаАдресаЗапроса = "/" + СтруктураПараметровПодключения.Index + "/" + СтруктураПараметровПодключения.Type + "/"; // тут был свой ГУИД
	//Если необходимо обновить имеющийся документ, дополним команду
	//СтрокаЗапроса = ?(Обновлять = Истина, СтрокаЗапроса + "/_update", СтрокаЗапроса);

	
	Возврат СтрокаАдресаЗапроса;
	
КонецФункции

Функция КонструкторHTTPЗапросаELK(АдресЗапросаДобавленияЛога, ДанныеЛогаВJSON)
		
	Запрос = Новый HTTPЗапрос(АдресЗапросаДобавленияЛога);
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	//необходимо убрать BOM символ. Такой вариант самый простой.
	Запрос.УстановитьТелоИзСтроки(ДанныеЛогаВJSON, "UTF8", ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Запрос;
	
КонецФункции


Функция ОтправитьЗапросВELK(СтруктураПараметровПодключения, HTTPЗапрос, ТекстОшибки = "", Отказ = Ложь) 
	
	//Установка соединения
	Соединение = УстановитьСоединениеСELK(СтруктураПараметровПодключения, ТекстОшибки, Отказ);
		
	Попытка
		ОтветСервера = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Отказ		= Истина;
		ТекстОшибки = "Не удалось записать лог: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат ПарсингОтвета(ОтветСервера, Отказ, ТекстОшибки);
	
КонецФункции


Функция ПарсингОтвета(ОтветСервера, ТекстОшибки = "", Отказ = Ложь) 
	
	Результат = Истина;
	
	Если ОтветСервера.КодСостояния = 201 Тогда 
		//Результат = Истина;
	Иначе
		Результат	= Ложь;
		ТекстОшибки = "Ошибка отправки HTTP запроса: " + ОтветСервера.КодСостояния;
		Отказ		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьСоединениеСELK(СтруктураПараметровПодключения, ТекстОшибки = "", Отказ = Ложь) 
		
	Попытка
		Соединение = Новый HTTPСоединение(СтруктураПараметровПодключения.АдресПодключения + ":" + Формат(СтруктураПараметровПодключения.ПортПодключения, "ЧГ=0"),,,,,3);		
	Исключение
		Соединение	= Неопределено;
		Отказ		= Истина;
		ТекстОшибки	= "Не удалось установить соединение с ElasticSearch по причине: " + ОписаниеОшибки();
	КонецПопытки;
		
	Возврат Соединение;
	
КонецФункции


Процедура ЗакрытьСоединениеСElasticSearch(Соединение)Экспорт 
	
	Соединение = Неопределено;
	
КонецПроцедуры


#КонецОбласти
