////////////////////////////////////////////////////////////////////////////////
// Подсистема "Логирование"
//
// 
// 
////////////////////////////////////////////////////////////////////////////////



#Область ОбработчикиСобытийФормы


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДанныеИндексовНаСервере();
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоСвойстваИндексов

&НаКлиенте
Процедура ДеревоСвойстваИндексовПриАктивизацииСтроки(Элемент)
	
	Если Не Элемент.ТекущиеДанные = Неопределено
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Индекс)
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Тип) Тогда 
		Элементы.ДеревоСвойстваИндексовУстановитьИндексИТипПоУмолчанию.Доступность = Истина;
	Иначе 
	    Элементы.ДеревоСвойстваИндексовУстановитьИндексИТипПоУмолчанию.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьИндексИТипПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвойствИндексов.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Индекс)
		И ЗначениеЗаполнено(ТекущиеДанные.Тип) Тогда 
		
		Индекс_Чтение	= ТекущиеДанные.Индекс;
		Индекс_Запись	= ТекущиеДанные.Индекс;
		Тип_Чтение		= ТекущиеДанные.Тип;
		Тип_Запись		= ТекущиеДанные.Тип;
	
	КонецЕсли;
	
	СохранитьНастройкиПодключенияНаСервере();
	
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ОбновитьДанныеИндексов(Команда)
	ОбновитьДанныеИндексовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеИндексовНаСервере()

	//
	ЗаполнитьДанныеФормыПоУмолчанию();
	
	// Состояние кластера
	ОтветСостояниеКластера = ЛогированиеСервер.ВыполнитьПолучениеСостоянияКластераСервер();
	Если Не (ТипЗнч(ОтветСостояниеКластера) = Тип("ФиксированнаяСтруктура") И ТипЗнч(ОтветСостояниеКластера.РезультатВыполнения) = Тип("Соответствие")) Тогда 
		ЛогированиеКлиентСервер.СообщитьПользователю("Не удалось получить состояние кластера по причине: 
					| " + ОтветСостояниеКластера.ТекстОшибки);
		Возврат
	КонецЕсли;
	//
	
	// Свойства индексов
	ОтветСвойстваИндексов = ЛогированиеСервер.ВыполнитьПолучениеМаппингаИндексовСервер();	
	Если Не (ТипЗнч(ОтветСвойстваИндексов) = Тип("ФиксированнаяСтруктура") И ТипЗнч(ОтветСвойстваИндексов.РезультатВыполнения) = Тип("Соответствие")) Тогда 
		ЛогированиеКлиентСервер.СообщитьПользователю("Не удалось получить состояние кластера по причине: 
					| " + ОтветСвойстваИндексов.ТекстОшибки);
		Возврат
	КонецЕсли;
	//
	
	// Заполнение
	СостояниеКластера	= ОтветСостояниеКластера.РезультатВыполнения;
	СвойстваИндексов	= ОтветСвойстваИндексов.РезультатВыполнения;
	ЗаполнитьДанныеФормыНаОсновеРезультатаЗапрос(СостояниеКластера, СвойстваИндексов);
	//
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьНастройкиПодключения(Команда)
	СохранитьНастройкиПодключенияНаСервере();
КонецПроцедуры


&НаСервере
Процедура СохранитьНастройкиПодключенияНаСервере()
	
	ТекстОшибки	= "";
	Отказ		= Ложь;
	
	// Настройки чтения
	СтруктураПараметровЧтения = ЛогированиеКлиентСервер.ИнициализироватьСтруктуруПараметровПодключенияКELK_ДляЗаписи(Перечисления.ТипыНастроекПодключенияКELK.Чтение,
																									Сервер_Чтение,
																									Порт_Чтение,
																									Индекс_Чтение,
																									Тип_Чтение,
																									Таймаут_Чтение);
				
	ЛогированиеВызовСервера.ЗаписатьПараметрыПодключенияКELK(СтруктураПараметровЧтения, ТекстОшибки, Отказ);
	
	Если Отказ Тогда 
		ЛогированиеКлиентСервер.СообщитьПользователю("Не удалось записать настройки подключения по причине: " + ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	//Настройки записи
	СтруктураПараметровЗаписи =  ЛогированиеКлиентСервер.ИнициализироватьСтруктуруПараметровПодключенияКELK_ДляЗаписи(Перечисления.ТипыНастроекПодключенияКELK.Запись,
																									Сервер_Запись,
																									Порт_Запись,
																									Индекс_Запись,
																									Тип_Запись,
																									Таймаут_Запись);
				
	ЛогированиеВызовСервера.ЗаписатьПараметрыПодключенияКELK(СтруктураПараметровЗаписи, ТекстОшибки, Отказ);
	
	Если Отказ Тогда 
		ЛогированиеКлиентСервер.СообщитьПользователю("Не удалось записать настройки подключения по причине: " + ТекстОшибки);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры


#КонецОбласти



#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоУмолчанию()
	
	СтруктураПараметровПодключения = ПараметрыСеанса.ПараметрыПодключенияКELK_Чтение;
	Индекс_Чтение	= СтруктураПараметровПодключения.Индекс;
	Тип_Чтение		= СтруктураПараметровПодключения.Тип;
	Сервер_Чтение	= СтруктураПараметровПодключения.Сервер;
	Порт_Чтение		= СтруктураПараметровПодключения.Порт;
	Таймаут_Чтение	= СтруктураПараметровПодключения.Таймаут;
	
	СтруктураПараметровПодключения = ПараметрыСеанса.ПараметрыПодключенияКELK_Запись;
	Индекс_Запись	= СтруктураПараметровПодключения.Индекс;
	Тип_Запись		= СтруктураПараметровПодключения.Тип;
	Сервер_Запись	= СтруктураПараметровПодключения.Сервер;
	Порт_Запись		= СтруктураПараметровПодключения.Порт;
	Таймаут_Запись	= СтруктураПараметровПодключения.Таймаут;
	
	ИмяКластера = "";
	Статус		= "";
	
	ДеревоСвойствИндексов.ПолучитьЭлементы().Очистить();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанныеФормыНаОсновеРезультатаЗапрос(СостояниеКластера, СвойстваИндексов)
	
	ИмяКластера	= СостояниеКластера["cluster_name"];
	Статус		= СостояниеКластера["status"];
	
	// Индексы
	Индексы = ДеревоСвойствИндексов.ПолучитьЭлементы();
	Для Каждого сИндексы Из СвойстваИндексов Цикл 
		нСтрокаИндекса		= Индексы.Добавить();
		
		нСтрокаИндекса.Индекс= сИндексы.Ключ;
		
		сМаппинг			= сИндексы.Значение["mappings"];
		
		// Типы
		Типы = нСтрокаИндекса.ПолучитьЭлементы();
		Для Каждого сТипы Из сМаппинг Цикл 
			нСтрокаТипа 		= Типы.Добавить();
			
			нСтрокаТипа.Индекс	= сИндексы.Ключ;
			нСтрокаТипа.Тип 	= сТипы.Ключ;
			      			
			сСвойства = сТипы.Значение["properties"];
			// Поля
			Поля = нСтрокаТипа.ПолучитьЭлементы();
			Для Каждого сПоля Из сСвойства Цикл
				нСтрокаПоля			= Поля.Добавить();
				
				нСтрокаПоля.Индекс	= сИндексы.Ключ;
				нСтрокаПоля.Тип 	= сТипы.Ключ;
				нСтрокаПоля.Поле 	= сПоля.Ключ;
				нСтрокаПоля.ТипПоля	= сПоля.Значение["type"]
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти







