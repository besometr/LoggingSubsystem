
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбновитьЛогиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЛогиНаСервере()
	
	ТекстОшибки	= "";
	Отказ		= "";
	
	ОтветСостояниеКластера = ПолучитьЛогиНаСервере();
	
	тзРезультат.Очистить();
	
	//Добираемся до логов
	Если Не ОтветСостояниеКластера.Результат Тогда
		Сообщить(ОтветСостояниеКластера.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СвойстваЛогов = ОтветСостояниеКластера.РезультатВыполнения["hits"];
	Если СвойстваЛогов = Неопределено Тогда 
		Сообщить("Свойства логов ""hits"" не найдена!");
		Возврат;
	КонецЕсли;
	
	МассивЛогов = СвойстваЛогов["hits"];
	
	Для Каждого СоответствиеЛога Из МассивЛогов Цикл 
		нСтрока = тзРезультат.Добавить();
		
		ГУИДЛога = СоответствиеЛога["_id"];
		СоответствиеПолейЛога = СоответствиеЛога["_source"];
		                  
		Для Каждого ПолеЛога Из СоответствиеПолейЛога Цикл 
					
			//TODO  разобраться с датой
			Если ПолеЛога.Ключ = "timestamp" Тогда 
				ДатаСтрокой = ПолеЛога.Значение;
				ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "-", "");
				ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
				ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "T", "");
				
				нСтрока["timestamp"] = МестноеВремя(Дата(ДатаСтрокой));
			Иначе 
				нСтрока[ПолеЛога.Ключ] = ПолеЛога.Значение;
			КонецЕсли;
				
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЛогиНаСервере(ТекстОшибки = "", Отказ = Ложь)
	
	//
	МассивВыбранныхПолей		= Новый Массив();
	
	СтруктураТочногоПоиска		= Новый Структура();
	СтруктураПоискаВхождений	= Новый Структура();
	СтруктураБольшеИлиРавно		= Новый Структура();
	СтруктураМеньшеИлиРавно		= Новый Структура();
	СтруктураСортировки			= Новый Структура();
	
	//КоличествоЗаписей
	КоличествоЗаписей = 100;
	ПараметрКоличествоЗаписейОсновной = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КоличествоЗаписей");
	Если Не КоличествоЗаписей = Неопределено Тогда 
		ПараметрКоличествоЗаписейПользовательский = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрКоличествоЗаписейОсновной.ИдентификаторПользовательскойНастройки);
		Попытка
			КоличествоЗаписей = ПараметрКоличествоЗаписейПользовательский.Значение;
		Исключение
			КоличествоЗаписей = ПараметрКоличествоЗаписейОсновной.Значение;
		КонецПопытки;
	КонецЕсли;   	
	
	//Поля
	Для Каждого мВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл 
		Если мВыбранноеПоле.Использование = Истина Тогда 
			МассивВыбранныхПолей.Добавить(Строка(мВыбранноеПоле.Поле));
		КонецЕсли;
	КонецЦикла;
	
	//Отборы
	Для Каждого ДоступныйЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПользовательскиОтбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ДоступныйЭлементОтбора.ИдентификаторПользовательскойНастройки);
		
		Если Не ПользовательскиОтбор = Неопределено
			И ПользовательскиОтбор.Использование = Истина Тогда 
		
			//Генерация структур для отбора
								
			//Равенство
			Если ПользовательскиОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
				СтруктураТочногоПоиска.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, ПользовательскиОтбор.ПравоеЗначение);
			//Вхождения	
			ИначеЕсли ПользовательскиОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда 
				СтруктураПоискаВхождений.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, ПользовательскиОтбор.ПравоеЗначение);
			//Больше Или равно
			ИначеЕсли ПользовательскиОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда 
				СтруктураБольшеИлиРавно.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, УниверсальноеВремя(ПользовательскиОтбор.ПравоеЗначение.Дата));
			//Меньше Или равно
			ИначеЕсли ПользовательскиОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда 
				СтруктураМеньшеИлиРавно.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, УниверсальноеВремя(ПользовательскиОтбор.ПравоеЗначение.Дата));	
			КонецЕсли;
				
		
		
		КонецЕсли;
		
	КонецЦикла;
		                 	
	//Сортировка
	СтруктураСортировки.Вставить("timestamp", "desc");
 	СтруктураПоискаЛогов = ЛогированиеКлиентСервер.КонструкторСтруктурыПоискаЛогов(МассивВыбранныхПолей,
																					СтруктураТочногоПоиска, 
																					СтруктураПоискаВхождений, 
																					СтруктураБольшеИлиРавно,
																					СтруктураМеньшеИлиРавно,
																					СтруктураСортировки, 
																					КоличествоЗаписей);
	
	Возврат ПрочитатьЛоги(СтруктураПоискаЛогов, ТекстОшибки, Отказ);
	
КонецФункции

