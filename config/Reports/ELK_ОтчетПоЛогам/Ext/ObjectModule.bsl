

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбновитьЛогиНаСервере();

КонецПроцедуры
	

Процедура ОбновитьЛогиНаСервере()
	
	ТекстОшибки	= "";
	Отказ		= "";
	
	ОтветСостояниеКластера = ПолучитьЛогиНаСервере();
	
	тзРезультат.Очистить();
	
	// Добираемся до логов
	Если Не ОтветСостояниеКластера.Результат Тогда
		ЛогированиеКлиентСервер.СообщитьПользователю(ОтветСостояниеКластера.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// От Logstash возвращается строка, запросы на получение данных необходимо адресовать Elastic`у
	Если Не (ТипЗнч(ОтветСостояниеКластера.РезультатВыполнения) = Тип("Соответствие")
		Или ТипЗнч(ОтветСостояниеКластера.РезультатВыполнения) = Тип("Структура")) Тогда 
		ЛогированиеКлиентСервер.СообщитьПользователю("Результат выполнения запроса является строкой: " + ОтветСостояниеКластера.РезультатВыполнения);
		Возврат
	КонецЕсли;
	
	СвойстваЛогов = ОтветСостояниеКластера.РезультатВыполнения["hits"];
	Если СвойстваЛогов = Неопределено Тогда 
		ЛогированиеКлиентСервер.СообщитьПользователю("Свойства логов ""hits"" не найдена.");
		Возврат;
	КонецЕсли;
	
	МассивЛогов = СвойстваЛогов["hits"];
	
	Для Каждого СоответствиеЛога Из МассивЛогов Цикл 
		нСтрока = тзРезультат.Добавить();
		
		ГУИДЛога = СоответствиеЛога["_id"];
		СоответствиеПолейЛога = СоответствиеЛога["_source"];
		
		Для Каждого ПолеЛога Из СоответствиеПолейЛога Цикл 
			
			// TODO  разобраться с датой
			Если ПолеЛога.Ключ = "timestamp" Тогда 
				ДатаСтрокой = ПолеЛога.Значение;
				ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "-", "");
				ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", "");
				ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "T", "");
				
				нСтрока["timestamp"] = МестноеВремя(Дата(ДатаСтрокой));
			Иначе 
				нСтрока[ПолеЛога.Ключ] = ПолеЛога.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьЛогиНаСервере(ТекстОшибки = "", Отказ = Ложь)
	
	//
	МассивВыбранныхПолей		= Новый Массив();
	
	СтруктураТочногоПоиска		= Новый Структура();
	СтруктураПоискаВхождений	= Новый Структура();
	СтруктураБольшеИлиРавно		= Новый Структура();
	СтруктураМеньшеИлиРавно		= Новый Структура();
	СтруктураСортировки			= Новый Структура();
	
	// КоличествоЗаписей
	КоличествоЗаписей = 100;
	ПараметрКоличествоЗаписейОсновной = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КоличествоЗаписей");
	Если Не КоличествоЗаписей = Неопределено Тогда 
		ПараметрКоличествоЗаписейПользовательский = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрКоличествоЗаписейОсновной.ИдентификаторПользовательскойНастройки);
		Попытка
			КоличествоЗаписей = ПараметрКоличествоЗаписейПользовательский.Значение;
		Исключение
			КоличествоЗаписей = ПараметрКоличествоЗаписейОсновной.Значение;
		КонецПопытки;
	КонецЕсли;   	
	
	// Поля
	Для Каждого мВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл 
		Если мВыбранноеПоле.Использование = Истина Тогда 
			МассивВыбранныхПолей.Добавить(Строка(мВыбранноеПоле.Поле));
		КонецЕсли;
	КонецЦикла;
	
	// Отборы
	Для Каждого ДоступныйЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ПользовательскийОтбор = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ДоступныйЭлементОтбора.ИдентификаторПользовательскойНастройки);
		
		Если Не ПользовательскийОтбор = Неопределено
			И ПользовательскийОтбор.Использование = Истина Тогда 
			
			// Генерация структур для отбора
			
			// Равенство
			Если ПользовательскийОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
				СтруктураТочногоПоиска.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, ПользовательскийОтбор.ПравоеЗначение);
				// Вхождения	
			ИначеЕсли ПользовательскийОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда 
				СтруктураПоискаВхождений.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, ПользовательскийОтбор.ПравоеЗначение);
				// Больше Или равно
			ИначеЕсли ПользовательскийОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда 
				СтруктураБольшеИлиРавно.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, УниверсальноеВремя(ПользовательскийОтбор.ПравоеЗначение.Дата));
				// Меньше Или равно
			ИначеЕсли ПользовательскийОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда 
				СтруктураМеньшеИлиРавно.Вставить(ДоступныйЭлементОтбора.ЛевоеЗначение, УниверсальноеВремя(ПользовательскийОтбор.ПравоеЗначение.Дата));	
			КонецЕсли;
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Сортировка
	СтруктураСортировки.Вставить("timestamp", "desc");
	СтруктураПоискаЛогов = ЛогированиеКлиентСервер.КонструкторСтруктурыПоискаЛогов(МассивВыбранныхПолей,
	СтруктураТочногоПоиска, 
	СтруктураПоискаВхождений, 
	СтруктураБольшеИлиРавно,
	СтруктураМеньшеИлиРавно,
	СтруктураСортировки, 
	КоличествоЗаписей);
	
	Возврат ПрочитатьЛоги(СтруктураПоискаЛогов, ТекстОшибки, Отказ);
	
КонецФункции

#КонецЕсли